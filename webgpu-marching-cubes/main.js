(()=>{"use strict";var e="undefined"!=typeof Float32Array?Float32Array:Array;function t(){var t=new e(2);return e!=Float32Array&&(t[0]=0,t[1]=0),t}function n(e,t,n){return e[0]=t,e[1]=n,e}function i(){var t=new e(3);return e!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t}function r(t,n,i){var r=new e(3);return r[0]=t,r[1]=n,r[2]=i,r}function a(e,t,n,i){return e[0]=t,e[1]=n,e[2]=i,e}function o(e,t){var n=t[0],i=t[1],r=t[2],a=n*n+i*i+r*r;return a>0&&(a=1/Math.sqrt(a)),e[0]=t[0]*a,e[1]=t[1]*a,e[2]=t[2]*a,e}function s(e,t,n){var i=t[0],r=t[1],a=t[2],o=n[0],s=n[1],u=n[2];return e[0]=r*u-a*s,e[1]=a*o-i*u,e[2]=i*s-r*o,e}Math.random,Math.PI,Math.hypot||(Math.hypot=function(){for(var e=0,t=arguments.length;t--;)e+=arguments[t]*arguments[t];return Math.sqrt(e)}),t();function u(){var t=new e(4);return e!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0,t[3]=0),t}function f(e,t,n,i,r){return e[0]=t,e[1]=n,e[2]=i,e[3]=r,e}function l(e,t){var n=t[0],i=t[1],r=t[2],a=t[3],o=n*n+i*i+r*r+a*a;return o>0&&(o=1/Math.sqrt(o)),e[0]=n*o,e[1]=i*o,e[2]=r*o,e[3]=a*o,e}function c(e,t,n){var i=t[0],r=t[1],a=t[2],o=t[3];return e[0]=n[0]*i+n[4]*r+n[8]*a+n[12]*o,e[1]=n[1]*i+n[5]*r+n[9]*a+n[13]*o,e[2]=n[2]*i+n[6]*r+n[10]*a+n[14]*o,e[3]=n[3]*i+n[7]*r+n[11]*a+n[15]*o,e}function d(){var t=new e(4);return e!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t[3]=1,t}i(),u();var h,p=f,v=function(e,t,n){var i=t[0],r=t[1],a=t[2],o=t[3],s=n[0],u=n[1],f=n[2],l=n[3];return e[0]=i*l+o*s+r*f-a*u,e[1]=r*l+o*u+a*s-i*f,e[2]=a*l+o*f+i*u-r*s,e[3]=o*l-i*s-r*u-a*f,e},g=l;function m(){var t=new e(16);return e!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0),t[0]=1,t[5]=1,t[10]=1,t[15]=1,t}function _(e,t){var n=t[0],i=t[1],r=t[2],a=t[3],o=t[4],s=t[5],u=t[6],f=t[7],l=t[8],c=t[9],d=t[10],h=t[11],p=t[12],v=t[13],g=t[14],m=t[15],_=n*s-i*o,y=n*u-r*o,b=n*f-a*o,w=i*u-r*s,S=i*f-a*s,x=r*f-a*u,C=l*v-c*p,P=l*g-d*p,E=l*m-h*p,B=c*g-d*v,U=c*m-h*v,T=d*m-h*g,G=_*T-y*U+b*B+w*E-S*P+x*C;return G?(G=1/G,e[0]=(s*T-u*U+f*B)*G,e[1]=(r*U-i*T-a*B)*G,e[2]=(v*x-g*S+m*w)*G,e[3]=(d*S-c*x-h*w)*G,e[4]=(u*E-o*T-f*P)*G,e[5]=(n*T-r*E+a*P)*G,e[6]=(g*b-p*x-m*y)*G,e[7]=(l*x-d*b+h*y)*G,e[8]=(o*U-s*E+f*C)*G,e[9]=(i*E-n*U-a*C)*G,e[10]=(p*S-v*b+m*_)*G,e[11]=(c*b-l*S-h*_)*G,e[12]=(s*P-o*B-u*C)*G,e[13]=(n*B-i*P+r*C)*G,e[14]=(v*y-p*w-g*_)*G,e[15]=(l*w-c*y+d*_)*G,e):null}function y(e,t){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=t[0],e[13]=t[1],e[14]=t[2],e[15]=1,e}i(),r(1,0,0),r(0,1,0),d(),d(),h=new e(9),e!=Float32Array&&(h[1]=0,h[2]=0,h[3]=0,h[5]=0,h[6]=0,h[7]=0),h[0]=1,h[4]=1,h[8]=1;var b=function(e,t,n){var i=t[0],r=t[1],a=t[2],o=t[3],s=t[4],u=t[5],f=t[6],l=t[7],c=t[8],d=t[9],h=t[10],p=t[11],v=t[12],g=t[13],m=t[14],_=t[15],y=n[0],b=n[1],w=n[2],S=n[3];return e[0]=y*i+b*s+w*c+S*v,e[1]=y*r+b*u+w*d+S*g,e[2]=y*a+b*f+w*h+S*m,e[3]=y*o+b*l+w*p+S*_,y=n[4],b=n[5],w=n[6],S=n[7],e[4]=y*i+b*s+w*c+S*v,e[5]=y*r+b*u+w*d+S*g,e[6]=y*a+b*f+w*h+S*m,e[7]=y*o+b*l+w*p+S*_,y=n[8],b=n[9],w=n[10],S=n[11],e[8]=y*i+b*s+w*c+S*v,e[9]=y*r+b*u+w*d+S*g,e[10]=y*a+b*f+w*h+S*m,e[11]=y*o+b*l+w*p+S*_,y=n[12],b=n[13],w=n[14],S=n[15],e[12]=y*i+b*s+w*c+S*v,e[13]=y*r+b*u+w*d+S*g,e[14]=y*a+b*f+w*h+S*m,e[15]=y*o+b*l+w*p+S*_,e};function w(e){var n,i,r=(i=e,(n=e)[0]*i[0]+n[1]*i[1]);if(r<=1)return p(d(),e[0],e[1],Math.sqrt(1-r),0);var a=function(e,t){var n=t[0],i=t[1],r=n*n+i*i;return r>0&&(r=1/Math.sqrt(r)),e[0]=t[0]*r,e[1]=t[1]*r,e}(t(),e);return p(d(),a[0],a[1],0,0)}function S(e,t,n){return e<t?t:e>n?n:e}class x{constructor(t,n,r,u,f){var l=a(i(),t[0],t[1],t[2]),c=a(i(),n[0],n[1],n[2]),h=a(i(),r[0],r[1],r[2]);o(h,h);var p,v,b,w,S=function(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e}(i(),c,l),x=(v=(p=S)[0],b=p[1],w=p[2],Math.hypot(v,b,w));o(S,S);var C=s(i(),S,h);o(C,C);var P=s(i(),C,S);o(P,P),s(C,S,P),o(C,C),this.zoomSpeed=u,this.invScreen=[1/f[0],1/f[1]],this.centerTranslation=y(m(),n),_(this.centerTranslation,this.centerTranslation);var E=a(i(),0,0,-1*x);this.translation=y(m(),E);var B=function(t,n,i,r,a,o,s,u,f){var l=new e(9);return l[0]=t,l[1]=n,l[2]=i,l[3]=r,l[4]=a,l[5]=o,l[6]=s,l[7]=u,l[8]=f,l}(C[0],C[1],C[2],P[0],P[1],P[2],-S[0],-S[1],-S[2]);!function(e,t){if(e===t){var n=t[1],i=t[2],r=t[5];e[1]=t[3],e[2]=t[6],e[3]=n,e[5]=t[7],e[6]=i,e[7]=r}else e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8]}(B,B),this.rotation=function(e,t){var n,i=t[0]+t[4]+t[8];if(i>0)n=Math.sqrt(i+1),e[3]=.5*n,n=.5/n,e[0]=(t[5]-t[7])*n,e[1]=(t[6]-t[2])*n,e[2]=(t[1]-t[3])*n;else{var r=0;t[4]>t[0]&&(r=1),t[8]>t[3*r+r]&&(r=2);var a=(r+1)%3,o=(r+2)%3;n=Math.sqrt(t[3*r+r]-t[3*a+a]-t[3*o+o]+1),e[r]=.5*n,n=.5/n,e[3]=(t[3*a+o]-t[3*o+a])*n,e[a]=(t[3*a+r]+t[3*r+a])*n,e[o]=(t[3*o+r]+t[3*r+o])*n}return e}(d(),B),g(this.rotation,this.rotation),this.camera=m(),this.invCamera=m(),this.updateCameraMatrix()}rotate(e,i){var r=n(t(),S(2*e[0]*this.invScreen[0]-1,-1,1),S(1-2*e[1]*this.invScreen[1],-1,1)),a=n(t(),S(2*i[0]*this.invScreen[0]-1,-1,1),S(1-2*i[1]*this.invScreen[1],-1,1)),o=w(r),s=w(a);this.rotation=v(this.rotation,o,this.rotation),this.rotation=v(this.rotation,s,this.rotation),this.updateCameraMatrix()}zoom(e){var t=a(i(),0,0,e*this.invScreen[1]*this.zoomSpeed),n=y(m(),t);this.translation=b(this.translation,n,this.translation),this.translation[14]>=-.2&&(this.translation[14]=-.2),this.updateCameraMatrix()}pan(e){var t=f(u(),e[0]*this.invScreen[0]*Math.abs(this.translation[14]),e[1]*this.invScreen[1]*Math.abs(this.translation[14]),0,0),n=c(u(),t,this.invCamera),i=y(m(),n);this.centerTranslation=b(this.centerTranslation,i,this.centerTranslation),this.updateCameraMatrix()}updateCameraMatrix(){var e=function(e,t){var n=t[0],i=t[1],r=t[2],a=t[3],o=n+n,s=i+i,u=r+r,f=n*o,l=i*o,c=i*s,d=r*o,h=r*s,p=r*u,v=a*o,g=a*s,m=a*u;return e[0]=1-c-p,e[1]=l+m,e[2]=d-g,e[3]=0,e[4]=l-m,e[5]=1-f-p,e[6]=h+v,e[7]=0,e[8]=d+g,e[9]=h-v,e[10]=1-f-c,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}(m(),this.rotation);this.camera=b(this.camera,e,this.centerTranslation),this.camera=b(this.camera,this.translation,this.camera),this.invCamera=_(this.invCamera,this.camera)}eyePos(){return[this.invCamera[12],this.invCamera[13],this.invCamera[14]]}eyeDir(){var e=f(u(),0,0,-1,0);return[(e=l(e=c(e,e,this.invCamera),e))[0],e[1],e[2]]}upDir(){var e=f(u(),0,1,0,0);return[(e=l(e=c(e,e,this.invCamera),e))[0],e[1],e[2]]}}function C(e,t){var n=[t[0]-e[0],t[1]-e[1]];return Math.sqrt(Math.pow(n[0],2)+Math.pow(n[1],2))}class P{constructor(){this.mousemove=null,this.press=null,this.wheel=null,this.twoFingerDrag=null,this.pinch=null}registerForCanvas(e){var t=null,n=this;e.addEventListener("mousemove",(function(i){i.preventDefault();var r=e.getBoundingClientRect(),a=[i.clientX-r.left,i.clientY-r.top];t?n.mousemove&&n.mousemove(t,a,i):t=[i.clientX-r.left,i.clientY-r.top],t=a})),e.addEventListener("mousedown",(function(t){t.preventDefault();var i=e.getBoundingClientRect(),r=[t.clientX-i.left,t.clientY-i.top];n.press&&n.press(r,t)})),e.addEventListener("wheel",(function(e){e.preventDefault(),n.wheel&&n.wheel(-e.deltaY)})),e.oncontextmenu=function(e){e.preventDefault()};var i={};e.addEventListener("touchstart",(function(t){var r=e.getBoundingClientRect();t.preventDefault();for(var a=0;a<t.changedTouches.length;++a){var o=t.changedTouches[a];i[o.identifier]=[o.clientX-r.left,o.clientY-r.top],1==t.changedTouches.length&&n.press&&n.press(i[o.identifier],t)}})),e.addEventListener("touchmove",(function(t){t.preventDefault();var r=e.getBoundingClientRect();if(1==Object.keys(i).length){if(n.mousemove){var a=t.changedTouches[0],o=i[a.identifier],s=[a.clientX-r.left,a.clientY-r.top];t.buttons=1,n.mousemove(o,s,t)}}else{for(var u={},f=0;f<t.changedTouches.length;++f)u[(a=t.changedTouches[f]).identifier]=[a.clientX-r.left,a.clientY-r.top];var l=[];for(a in i)a in u||(u[a]=i[a]),l.push(i[a]);var c=[];for(a in u)c.push(u[a]);var d=[vec2.set(vec2.create(),c[0][0]-l[0][0],c[0][1]-l[0][1]),vec2.set(vec2.create(),c[1][0]-l[1][0],c[1][1]-l[1][1])],h=[vec2.create(),vec2.create()];vec2.normalize(h[0],d[0]),vec2.normalize(h[1],d[1]);var p=vec2.set(vec2.create(),l[1][0]-l[0][0],l[1][1]-l[0][1]);vec2.normalize(p,p);var v=vec2.lerp(vec2.create(),d[0],d[1],.5);vec2.normalize(v,v);var g=[vec2.dot(p,h[0]),vec2.dot(p,h[1])],m=[vec2.dot(v,h[0]),vec2.dot(v,h[1])];if(n.pinch&&Math.abs(g[0])>.5&&Math.abs(g[1])>.5&&Math.sign(g[0])!=Math.sign(g[1])){var _=C(l[0],l[1]),y=C(c[0],c[1]);n.pinch(y-_)}else if(n.twoFingerDrag&&Math.abs(m[0])>.5&&Math.abs(m[1])>.5&&Math.sign(m[0])==Math.sign(m[1])){var b=vec2.lerp(vec2.create(),d[0],d[1],.5);b[1]=-b[1],n.twoFingerDrag(b)}}for(f=0;f<t.changedTouches.length;++f)a=t.changedTouches[f],i[a.identifier]=[a.clientX-r.left,a.clientY-r.top]}));var r=function(e){e.preventDefault();for(var t=0;t<e.changedTouches.length;++t){var n=e.changedTouches[t];delete i[n.identifier]}};e.addEventListener("touchcancel",r),e.addEventListener("touchend",r)}}function E(e,t){return Math.floor((e+t-1)/t)*t}function B(e,t,n){return i=this,r=void 0,o=function*(){let i=e.createShaderModule({code:t}),r=yield i.getCompilationInfo();if(r.messages.length>0){let e=!1;n?console.log(`Shader compilation log for ${n}:`):console.log("Shader compilation log:");let i=t.split("\n");for(let t=0;t<r.messages.length;++t){let n=r.messages[t];console.log(`${n.lineNum}:${n.linePos} - ${n.message}`),console.log(`    ${i[n.lineNum-1]}`),e=e||"error"==n.type}if(e)throw console.log("Shader failed to compile"),Error("Shader failed to compile")}return i},new((a=void 0)||(a=Promise))((function(e,t){function n(e){try{u(o.next(e))}catch(e){t(e)}}function s(e){try{u(o.throw(e))}catch(e){t(e)}}function u(t){var i;t.done?e(t.value):(i=t.value,i instanceof a?i:new a((function(e){e(i)}))).then(n,s)}u((o=o.apply(i,r||[])).next())}));var i,r,a,o}var U,T,G,M,O,k=function(e,t,n,i){return new(n||(n=Promise))((function(r,a){function o(e){try{u(i.next(e))}catch(e){a(e)}}function s(e){try{u(i.throw(e))}catch(e){a(e)}}function u(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,s)}u((i=i.apply(e,t||[])).next())}))},A=function(e,t,n,i,r){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!r)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===i?r.call(e,n):r?r.value=n:t.set(e,n),n},L=function(e,t,n,i){if("a"===n&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?i:"a"===n?i.call(e):i?i.value:t.get(e)};const I=new Map([["Fuel","fuel_64x64x64_uint8.raw"],["Neghip","neghip_64x64x64_uint8.raw"],["Hydrogen Atom","hydrogen_atom_128x128x128_uint8.raw"],["Bonsai","bonsai_256x256x256_uint8.raw"],["Foot","foot_256x256x256_uint8.raw"],["Skull","skull_256x256x256_uint8.raw"],["Aneurysm","aneurism_256x256x256_uint8.raw"]]);var R;function z(e){switch(e){case R.UINT8:return 1;case R.UINT16:return 2;case R.UINT32:case R.FLOAT32:return 4}}function D(e){switch(e){case R.UINT8:return"r8unorm";case R.UINT16:return"r16uint";case R.UINT32:return"r32uint";case R.FLOAT32:return"r32float"}}!function(e){e[e.UINT8=0]="UINT8",e[e.UINT16=1]="UINT16",e[e.UINT32=2]="UINT32",e[e.FLOAT32=3]="FLOAT32"}(R||(R={}));class W{constructor(e){U.set(this,void 0),T.set(this,void 0),G.set(this,void 0),M.set(this,void 0),O.set(this,void 0);let t=e.match(/(\w+)_(\d+)x(\d+)x(\d+)_(\w+)\.*/);A(this,U,[parseInt(t[2]),parseInt(t[3]),parseInt(t[4])],"f"),A(this,T,function(e){if("uint8"==e)return R.UINT8;if("uint16"==e)return R.UINT16;if("UINT32"==e)return R.UINT32;if("FLOAT32"==e)return R.FLOAT32;throw Error(`Unsupported/invalid voxel type string ${e}`)}(t[5]),"f"),A(this,G,e,"f")}static load(e,t){return k(this,void 0,void 0,(function*(){let n=new W(e);return yield n.fetch(),yield n.upload(t),n}))}upload(e){return k(this,void 0,void 0,(function*(){A(this,O,e.createTexture({size:L(this,U,"f"),format:D(L(this,T,"f")),dimension:"3d",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST}),"f");let t=e.createBuffer({size:L(this,M,"f").byteLength,usage:GPUBufferUsage.COPY_SRC,mappedAtCreation:!0});new Uint8Array(t.getMappedRange()).set(L(this,M,"f")),t.unmap();let n=e.createCommandEncoder(),i={buffer:t,bytesPerRow:E(L(this,U,"f")[0]*z(L(this,T,"f")),256),rowsPerImage:L(this,U,"f")[1]},r={texture:L(this,O,"f")};n.copyBufferToTexture(i,r,L(this,U,"f")),e.queue.submit([n.finish()]),yield e.queue.onSubmittedWorkDone()}))}get dims(){return L(this,U,"f")}get dualGridDims(){return[L(this,U,"f")[0]-1,L(this,U,"f")[1]-1,L(this,U,"f")[2]-1]}get voxelType(){return L(this,T,"f")}get texture(){return L(this,O,"f")}get numVoxels(){return L(this,U,"f")[0]*L(this,U,"f")[1]*L(this,U,"f")[2]}get dualGridNumVoxels(){return(L(this,U,"f")[0]-1)*(L(this,U,"f")[1]-1)*(L(this,U,"f")[2]-1)}pad(e){const t=z(L(this,T,"f")),n=[E(L(this,U,"f")[0]*t,256),L(this,U,"f")[1]*t,L(this,U,"f")[2]*t];let i=new Uint8Array(n[0]*n[1]*n[2]);const r=L(this,U,"f")[1]*L(this,U,"f")[2];for(let a=0;a<r;++a){let r=e.subarray(a*L(this,U,"f")[0]*t,a*L(this,U,"f")[0]*t+L(this,U,"f")[0]*t);i.set(r,a*n[0])}return i}fetch(){return k(this,void 0,void 0,(function*(){const e=z(L(this,T,"f")),t=L(this,U,"f")[0]*L(this,U,"f")[1]*L(this,U,"f")[2]*e;let n=document.getElementById("loadingText"),i=document.getElementById("loadingProgressBar");n.innerHTML="Loading Volume...",i.setAttribute("style","width: 0%");let r="https://cdn.willusher.io/demo-volumes/"+L(this,G,"f");try{let a=(yield fetch(r)).body.getReader(),o=0,s=new Uint8Array(t);for(;;){let{done:e,value:n}=yield a.read();if(e)break;s.set(n,o),o+=n.length;let r=o/t*100;i.setAttribute("style",`width: ${r.toFixed(2)}%`)}n.innerHTML="Volume Loaded",L(this,U,"f")[0]*e%256!=0?A(this,M,this.pad(s),"f"):A(this,M,s,"f")}catch(e){throw n.innerHTML="Error loading volume",Error(`Error loading volume data ${e}`)}}))}}U=new WeakMap,T=new WeakMap,G=new WeakMap,M=new WeakMap,O=new WeakMap;var N,V,F,K,Z,q=function(e,t,n,i){return new(n||(n=Promise))((function(r,a){function o(e){try{u(i.next(e))}catch(e){a(e)}}function s(e){try{u(i.throw(e))}catch(e){a(e)}}function u(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,s)}u((i=i.apply(e,t||[])).next())}))},Y=function(e,t,n,i,r){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!r)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===i?r.call(e,n):r?r.value=n:t.set(e,n),n},X=function(e,t,n,i){if("a"===n&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?i:"a"===n?i.call(e):i?i.value:t.get(e)};const j=128;class ${constructor(e){N.set(this,void 0),V.set(this,16384),F.set(this,void 0),K.set(this,void 0),Z.set(this,void 0),Y(this,N,e,"f")}static create(e){return q(this,void 0,void 0,(function*(){let t=new $(e),n=e.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage",hasDynamicOffset:!0}},{binding:1,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}}]}),i=e.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}},{binding:1,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}}]});return Y(t,F,e.createComputePipeline({layout:e.createPipelineLayout({bindGroupLayouts:[n]}),compute:{module:yield B(e,"// See https://www.eecs.umich.edu/courses/eecs570/hw/parprefix.pdf\n\n@group(0) @binding(0)\nvar<storage, read_write> vals: array<u32>;\n\n@group(0) @binding(1)\nvar<storage, read_write> block_sums: array<u32>;\n\n// Pipeline can override SCAN_BLOCK_SIZE\n@id(0) override SCAN_BLOCK_SIZE: u32 = 512;\n\nvar<workgroup> chunk: array<u32, SCAN_BLOCK_SIZE>;\n\n@compute @workgroup_size(SCAN_BLOCK_SIZE / 2)\nfn main(@builtin(global_invocation_id) global_id: vec3<u32>,\n        @builtin(local_invocation_id) local_id: vec3<u32>,\n        @builtin(workgroup_id) group_id: vec3<u32>)\n{\n    chunk[2 * local_id.x] = vals[2 * global_id.x];\n    chunk[2 * local_id.x + 1] = vals[2 * global_id.x + 1];\n\n    var offs = 1u;\n    // Reduce step up tree\n    for (var d = SCAN_BLOCK_SIZE >> 1; d > 0; d = d >> 1) {\n        workgroupBarrier();\n        if (local_id.x < d) {\n            let a = offs * (2 * local_id.x + 1) - 1;\n            let b = offs * (2 * local_id.x + 2) - 1;\n            chunk[b] += chunk[a];\n        }\n        offs = offs << 1;\n    }\n\n    if (local_id.x == 0) {\n        block_sums[group_id.x] = chunk[SCAN_BLOCK_SIZE - 1];\n        chunk[SCAN_BLOCK_SIZE - 1] = 0;\n    }\n\n    // Sweep down the tree to finish the scan\n    for (var d = 1u; d < SCAN_BLOCK_SIZE; d = d << 1) {\n        offs = offs >> 1;\n        workgroupBarrier();\n        if (local_id.x < d) {\n            let a = offs * (2 * local_id.x + 1) - 1;\n            let b = offs * (2 * local_id.x + 2) - 1;\n            let tmp = chunk[a];\n            chunk[a] = chunk[b];\n            chunk[b] += tmp;\n        }\n    }\n\n    workgroupBarrier();\n    vals[2 * global_id.x] = chunk[2 * local_id.x];\n    vals[2 * global_id.x + 1] = chunk[2 * local_id.x + 1];\n}\n\n","ExclusiveScan::prefixSum"),entryPoint:"main",constants:{0:j}}}),"f"),Y(t,K,e.createComputePipeline({layout:e.createPipelineLayout({bindGroupLayouts:[i]}),compute:{module:yield B(e,"// See https://www.eecs.umich.edu/courses/eecs570/hw/parprefix.pdf\n// Compute the prefix sum over the results from each block, this no longer\n// writes out the block sums since we're scanning on the block sums\n// This shader also applies the carry_in value and writes the carry_ouy\n\n@group(0) @binding(0)\nvar<storage, read_write> vals: array<u32>;\n\nstruct CarryInOut {\n    in: u32,\n    out: u32,\n}\n\n@group(0) @binding(1)\nvar<storage, read_write> carry: CarryInOut;\n\n// Pipeline can override SCAN_BLOCK_SIZE\n@id(0) override SCAN_BLOCK_SIZE: u32 = 512;\n\nvar<workgroup> chunk: array<u32, SCAN_BLOCK_SIZE>;\n\n@compute @workgroup_size(SCAN_BLOCK_SIZE / 2)\nfn main(@builtin(global_invocation_id) global_id: vec3<u32>,\n        @builtin(local_invocation_id) local_id: vec3<u32>,\n        @builtin(workgroup_id) group_id: vec3<u32>)\n{\n    chunk[2 * local_id.x] = vals[2 * global_id.x];\n    chunk[2 * local_id.x + 1] = vals[2 * global_id.x + 1];\n\n    var offs = 1u;\n    // Reduce step up tree\n    for (var d = SCAN_BLOCK_SIZE >> 1; d > 0; d = d >> 1) {\n        workgroupBarrier();\n        if (local_id.x < d) {\n            let a = offs * (2 * local_id.x + 1) - 1;\n            let b = offs * (2 * local_id.x + 2) - 1;\n            chunk[b] += chunk[a];\n        }\n        offs = offs << 1;\n    }\n\n    if (local_id.x == 0) {\n        carry.out = chunk[SCAN_BLOCK_SIZE - 1] + carry.in;\n        chunk[SCAN_BLOCK_SIZE - 1] = 0;\n    }\n\n    // Sweep down the tree to finish the scan\n    for (var d = 1u; d < SCAN_BLOCK_SIZE; d = d << 1) {\n        offs = offs >> 1;\n        workgroupBarrier();\n        if (local_id.x < d) {\n            let a = offs * (2 * local_id.x + 1) - 1;\n            let b = offs * (2 * local_id.x + 2) - 1;\n            let tmp = chunk[a];\n            chunk[a] = chunk[b];\n            chunk[b] += tmp;\n        }\n    }\n\n    workgroupBarrier();\n    vals[2 * global_id.x] = chunk[2 * local_id.x] + carry.in;\n    vals[2 * global_id.x + 1] = chunk[2 * local_id.x + 1] + carry.in;\n}\n\n","ExclusiveScan::prefixSumBlocks"),entryPoint:"main",constants:{0:j}}}),"f"),Y(t,Z,e.createComputePipeline({layout:e.createPipelineLayout({bindGroupLayouts:[n]}),compute:{module:yield B(e,"@group(0) @binding(0)\nvar<storage, read_write> vals: array<u32>;\n\n@group(0) @binding(1)\nvar<storage, read_write> block_sums: array<u32>;\n\n// Pipeline can override SCAN_BLOCK_SIZE\n@id(0) override SCAN_BLOCK_SIZE: u32 = 512;\n\n@compute @workgroup_size(SCAN_BLOCK_SIZE / 2)\nfn main(@builtin(global_invocation_id) global_id: vec3<u32>,\n        @builtin(workgroup_id) group_id: vec3<u32>)\n{\n    let prev_sum = block_sums[group_id.x];\n    vals[2 * global_id.x] += prev_sum;\n    vals[2 * global_id.x + 1] += prev_sum;\n}\n\n","ExclusiveScan::addBlockSums"),entryPoint:"main",constants:{0:j}}}),"f"),t}))}getAlignedSize(e){return E(e,j)}scan(e,t){return q(this,void 0,void 0,(function*(){const n=e.size/4;if(n!=this.getAlignedSize(n))throw Error(`Error: GPU input buffer size (${n}) must be aligned to ExclusiveScan::getAlignedSize, expected ${this.getAlignedSize(n)}`);let i=X(this,N,"f").createBuffer({size:4,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST}),r=X(this,N,"f").createBuffer({size:512,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST}),a=X(this,N,"f").createBuffer({size:8,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST}),o=X(this,N,"f").createBuffer({size:4,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST}),s=X(this,N,"f").createBindGroup({layout:X(this,K,"f").getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:r}},{binding:1,resource:{buffer:a}}]});const u=Math.ceil(t/X(this,V,"f"));let f=null,l=null;u>1?(f=X(this,N,"f").createBindGroup({layout:X(this,F,"f").getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:e,size:4*X(this,V,"f")}},{binding:1,resource:{buffer:r}}]}),l=n%X(this,V,"f")!=0?X(this,N,"f").createBindGroup({layout:X(this,F,"f").getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:e,size:n%X(this,V,"f")*4}},{binding:1,resource:{buffer:r}}]}):f):(f=X(this,N,"f").createBindGroup({layout:X(this,F,"f").getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:e,size:4*Math.min(X(this,V,"f"),n)}},{binding:1,resource:{buffer:r}}]}),l=f);var c=X(this,N,"f").createCommandEncoder();c.clearBuffer(r),c.clearBuffer(a),t<n&&c.clearBuffer(e,4*t,4);for(var d=0;d<u;++d){let e=f;d+1==u&&(e=l);let t=Math.min((n-d*X(this,V,"f"))/j,j);c.clearBuffer(r);var h=c.beginComputePass();h.setPipeline(X(this,F,"f")),h.setBindGroup(0,e,[d*X(this,V,"f")*4]),h.dispatchWorkgroups(t,1,1),h.setPipeline(X(this,K,"f")),h.setBindGroup(0,s),h.dispatchWorkgroups(1,1,1),h.setPipeline(X(this,Z,"f")),h.setBindGroup(0,e,[d*X(this,V,"f")*4]),h.dispatchWorkgroups(t,1,1),h.end(),c.copyBufferToBuffer(a,4,o,0,4),c.copyBufferToBuffer(o,0,a,0,4)}t<n?c.copyBufferToBuffer(e,4*t,i,0,4):c.copyBufferToBuffer(a,4,i,0,4),X(this,N,"f").queue.submit([c.finish()]),yield X(this,N,"f").queue.onSubmittedWorkDone(),yield i.mapAsync(GPUMapMode.READ);var p=new Uint32Array(i.getMappedRange())[0];return i.unmap(),p}))}}N=new WeakMap,V=new WeakMap,F=new WeakMap,K=new WeakMap,Z=new WeakMap;const H=new Int32Array([-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,3,-1,0,0,0,0,0,0,0,0,0,0,0,0,1,9,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,8,1,9,8,3,1,-1,0,0,0,0,0,0,0,0,0,2,10,1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,8,3,1,2,10,-1,0,0,0,0,0,0,0,0,0,9,2,10,9,0,2,-1,0,0,0,0,0,0,0,0,0,3,2,10,3,10,8,8,10,9,-1,0,0,0,0,0,0,2,3,11,-1,0,0,0,0,0,0,0,0,0,0,0,0,11,0,8,11,2,0,-1,0,0,0,0,0,0,0,0,0,1,9,0,2,3,11,-1,0,0,0,0,0,0,0,0,0,2,1,9,2,9,11,11,9,8,-1,0,0,0,0,0,0,3,10,1,3,11,10,-1,0,0,0,0,0,0,0,0,0,1,0,8,1,8,10,10,8,11,-1,0,0,0,0,0,0,0,3,11,0,11,9,9,11,10,-1,0,0,0,0,0,0,11,10,9,11,9,8,-1,0,0,0,0,0,0,0,0,0,4,7,8,-1,0,0,0,0,0,0,0,0,0,0,0,0,4,3,0,4,7,3,-1,0,0,0,0,0,0,0,0,0,4,7,8,9,0,1,-1,0,0,0,0,0,0,0,0,0,9,4,7,9,7,1,1,7,3,-1,0,0,0,0,0,0,4,7,8,1,2,10,-1,0,0,0,0,0,0,0,0,0,4,3,0,4,7,3,2,10,1,-1,0,0,0,0,0,0,2,9,0,2,10,9,4,7,8,-1,0,0,0,0,0,0,3,2,7,7,9,4,7,2,9,9,2,10,-1,0,0,0,8,4,7,3,11,2,-1,0,0,0,0,0,0,0,0,0,7,11,2,7,2,4,4,2,0,-1,0,0,0,0,0,0,2,3,11,1,9,0,8,4,7,-1,0,0,0,0,0,0,2,1,9,2,9,4,2,4,11,11,4,7,-1,0,0,0,10,3,11,10,1,3,8,4,7,-1,0,0,0,0,0,0,4,7,0,0,10,1,7,10,0,7,11,10,-1,0,0,0,8,4,7,0,3,11,0,11,9,9,11,10,-1,0,0,0,7,9,4,7,11,9,9,11,10,-1,0,0,0,0,0,0,4,9,5,-1,0,0,0,0,0,0,0,0,0,0,0,0,8,3,0,4,9,5,-1,0,0,0,0,0,0,0,0,0,0,5,4,0,1,5,-1,0,0,0,0,0,0,0,0,0,4,8,3,4,3,5,5,3,1,-1,0,0,0,0,0,0,1,2,10,9,5,4,-1,0,0,0,0,0,0,0,0,0,4,9,5,8,3,0,1,2,10,-1,0,0,0,0,0,0,10,5,4,10,4,2,2,4,0,-1,0,0,0,0,0,0,4,8,3,4,3,2,4,2,5,5,2,10,-1,0,0,0,2,3,11,5,4,9,-1,0,0,0,0,0,0,0,0,0,11,0,8,11,2,0,9,5,4,-1,0,0,0,0,0,0,5,0,1,5,4,0,3,11,2,-1,0,0,0,0,0,0,11,2,8,8,5,4,2,5,8,2,1,5,-1,0,0,0,3,10,1,3,11,10,5,4,9,-1,0,0,0,0,0,0,9,5,4,1,0,8,1,8,10,10,8,11,-1,0,0,0,10,5,11,11,0,3,11,5,0,0,5,4,-1,0,0,0,4,10,5,4,8,10,10,8,11,-1,0,0,0,0,0,0,7,9,5,7,8,9,-1,0,0,0,0,0,0,0,0,0,0,9,5,0,5,3,3,5,7,-1,0,0,0,0,0,0,8,0,1,8,1,7,7,1,5,-1,0,0,0,0,0,0,3,1,5,3,5,7,-1,0,0,0,0,0,0,0,0,0,7,9,5,7,8,9,1,2,10,-1,0,0,0,0,0,0,1,2,10,0,9,5,0,5,3,3,5,7,-1,0,0,0,7,8,5,5,2,10,8,2,5,8,0,2,-1,0,0,0,10,3,2,10,5,3,3,5,7,-1,0,0,0,0,0,0,9,7,8,9,5,7,11,2,3,-1,0,0,0,0,0,0,0,9,2,2,7,11,2,9,7,7,9,5,-1,0,0,0,3,11,2,8,0,1,8,1,7,7,1,5,-1,0,0,0,2,7,11,2,1,7,7,1,5,-1,0,0,0,0,0,0,11,1,3,11,10,1,7,8,9,7,9,5,-1,0,0,0,11,10,1,11,1,7,7,1,0,7,0,9,7,9,5,-1,5,7,8,5,8,10,10,8,0,10,0,3,10,3,11,-1,11,10,5,11,5,7,-1,0,0,0,0,0,0,0,0,0,10,6,5,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,8,3,10,6,5,-1,0,0,0,0,0,0,0,0,0,9,0,1,5,10,6,-1,0,0,0,0,0,0,0,0,0,8,1,9,8,3,1,10,6,5,-1,0,0,0,0,0,0,6,1,2,6,5,1,-1,0,0,0,0,0,0,0,0,0,6,1,2,6,5,1,0,8,3,-1,0,0,0,0,0,0,5,9,0,5,0,6,6,0,2,-1,0,0,0,0,0,0,6,5,2,2,8,3,5,8,2,5,9,8,-1,0,0,0,2,3,11,10,6,5,-1,0,0,0,0,0,0,0,0,0,0,11,2,0,8,11,6,5,10,-1,0,0,0,0,0,0,0,1,9,3,11,2,10,6,5,-1,0,0,0,0,0,0,10,6,5,2,1,9,2,9,11,11,9,8,-1,0,0,0,11,6,5,11,5,3,3,5,1,-1,0,0,0,0,0,0,11,6,8,8,1,0,8,6,1,1,6,5,-1,0,0,0,0,3,11,0,11,6,0,6,9,9,6,5,-1,0,0,0,5,11,6,5,9,11,11,9,8,-1,0,0,0,0,0,0,7,8,4,6,5,10,-1,0,0,0,0,0,0,0,0,0,3,4,7,3,0,4,5,10,6,-1,0,0,0,0,0,0,6,5,10,7,8,4,9,0,1,-1,0,0,0,0,0,0,5,10,6,9,4,7,9,7,1,1,7,3,-1,0,0,0,1,6,5,1,2,6,7,8,4,-1,0,0,0,0,0,0,7,0,4,7,3,0,6,5,1,6,1,2,-1,0,0,0,4,7,8,5,9,0,5,0,6,6,0,2,-1,0,0,0,2,6,5,2,5,3,3,5,9,3,9,4,3,4,7,-1,4,7,8,5,10,6,11,2,3,-1,0,0,0,0,0,0,6,5,10,7,11,2,7,2,4,4,2,0,-1,0,0,0,4,7,8,9,0,1,6,5,10,3,11,2,-1,0,0,0,6,5,10,11,4,7,11,2,4,4,2,9,9,2,1,-1,7,8,4,11,6,5,11,5,3,3,5,1,-1,0,0,0,0,4,7,0,7,1,1,7,11,1,11,6,1,6,5,-1,4,7,8,9,6,5,9,0,6,6,0,11,11,0,3,-1,7,11,4,11,9,4,11,5,9,11,6,5,-1,0,0,0,10,4,9,10,6,4,-1,0,0,0,0,0,0,0,0,0,10,4,9,10,6,4,8,3,0,-1,0,0,0,0,0,0,1,10,6,1,6,0,0,6,4,-1,0,0,0,0,0,0,4,8,6,6,1,10,6,8,1,1,8,3,-1,0,0,0,9,1,2,9,2,4,4,2,6,-1,0,0,0,0,0,0,0,8,3,9,1,2,9,2,4,4,2,6,-1,0,0,0,0,2,6,0,6,4,-1,0,0,0,0,0,0,0,0,0,3,4,8,3,2,4,4,2,6,-1,0,0,0,0,0,0,4,10,6,4,9,10,2,3,11,-1,0,0,0,0,0,0,8,2,0,8,11,2,4,9,10,4,10,6,-1,0,0,0,2,3,11,1,10,6,1,6,0,0,6,4,-1,0,0,0,8,11,2,8,2,4,4,2,1,4,1,10,4,10,6,-1,3,11,1,1,4,9,11,4,1,11,6,4,-1,0,0,0,6,4,9,6,9,11,11,9,1,11,1,0,11,0,8,-1,11,0,3,11,6,0,0,6,4,-1,0,0,0,0,0,0,8,11,6,8,6,4,-1,0,0,0,0,0,0,0,0,0,6,7,8,6,8,10,10,8,9,-1,0,0,0,0,0,0,3,0,7,7,10,6,0,10,7,0,9,10,-1,0,0,0,1,10,6,1,6,7,1,7,0,0,7,8,-1,0,0,0,6,1,10,6,7,1,1,7,3,-1,0,0,0,0,0,0,9,1,8,8,6,7,8,1,6,6,1,2,-1,0,0,0,7,3,0,7,0,6,6,0,9,6,9,1,6,1,2,-1,8,6,7,8,0,6,6,0,2,-1,0,0,0,0,0,0,2,6,7,2,7,3,-1,0,0,0,0,0,0,0,0,0,11,2,3,6,7,8,6,8,10,10,8,9,-1,0,0,0,9,10,6,9,6,0,0,6,7,0,7,11,0,11,2,-1,3,11,2,0,7,8,0,1,7,7,1,6,6,1,10,-1,6,7,10,7,1,10,7,2,1,7,11,2,-1,0,0,0,1,3,11,1,11,9,9,11,6,9,6,7,9,7,8,-1,6,7,11,9,1,0,-1,0,0,0,0,0,0,0,0,0,8,0,7,0,6,7,0,11,6,0,3,11,-1,0,0,0,6,7,11,-1,0,0,0,0,0,0,0,0,0,0,0,0,6,11,7,-1,0,0,0,0,0,0,0,0,0,0,0,0,3,0,8,11,7,6,-1,0,0,0,0,0,0,0,0,0,6,11,7,9,0,1,-1,0,0,0,0,0,0,0,0,0,1,8,3,1,9,8,7,6,11,-1,0,0,0,0,0,0,11,7,6,2,10,1,-1,0,0,0,0,0,0,0,0,0,1,2,10,0,8,3,11,7,6,-1,0,0,0,0,0,0,9,2,10,9,0,2,11,7,6,-1,0,0,0,0,0,0,11,7,6,3,2,10,3,10,8,8,10,9,-1,0,0,0,2,7,6,2,3,7,-1,0,0,0,0,0,0,0,0,0,8,7,6,8,6,0,0,6,2,-1,0,0,0,0,0,0,7,2,3,7,6,2,1,9,0,-1,0,0,0,0,0,0,8,7,9,9,2,1,9,7,2,2,7,6,-1,0,0,0,6,10,1,6,1,7,7,1,3,-1,0,0,0,0,0,0,6,10,1,6,1,0,6,0,7,7,0,8,-1,0,0,0,7,6,3,3,9,0,6,9,3,6,10,9,-1,0,0,0,6,8,7,6,10,8,8,10,9,-1,0,0,0,0,0,0,8,6,11,8,4,6,-1,0,0,0,0,0,0,0,0,0,11,3,0,11,0,6,6,0,4,-1,0,0,0,0,0,0,6,8,4,6,11,8,0,1,9,-1,0,0,0,0,0,0,1,9,3,3,6,11,9,6,3,9,4,6,-1,0,0,0,8,6,11,8,4,6,10,1,2,-1,0,0,0,0,0,0,2,10,1,11,3,0,11,0,6,6,0,4,-1,0,0,0,11,4,6,11,8,4,2,10,9,2,9,0,-1,0,0,0,4,6,11,4,11,9,9,11,3,9,3,2,9,2,10,-1,3,8,4,3,4,2,2,4,6,-1,0,0,0,0,0,0,2,0,4,2,4,6,-1,0,0,0,0,0,0,0,0,0,0,1,9,3,8,4,3,4,2,2,4,6,-1,0,0,0,9,2,1,9,4,2,2,4,6,-1,0,0,0,0,0,0,6,10,4,4,3,8,4,10,3,3,10,1,-1,0,0,0,1,6,10,1,0,6,6,0,4,-1,0,0,0,0,0,0,10,9,0,10,0,6,6,0,3,6,3,8,6,8,4,-1,10,9,4,10,4,6,-1,0,0,0,0,0,0,0,0,0,6,11,7,5,4,9,-1,0,0,0,0,0,0,0,0,0,0,8,3,9,5,4,7,6,11,-1,0,0,0,0,0,0,0,5,4,0,1,5,6,11,7,-1,0,0,0,0,0,0,7,6,11,4,8,3,4,3,5,5,3,1,-1,0,0,0,2,10,1,11,7,6,5,4,9,-1,0,0,0,0,0,0,0,8,3,1,2,10,4,9,5,11,7,6,-1,0,0,0,6,11,7,10,5,4,10,4,2,2,4,0,-1,0,0,0,6,11,7,5,2,10,5,4,2,2,4,3,3,4,8,-1,2,7,6,2,3,7,4,9,5,-1,0,0,0,0,0,0,4,9,5,8,7,6,8,6,0,0,6,2,-1,0,0,0,3,6,2,3,7,6,0,1,5,0,5,4,-1,0,0,0,1,5,4,1,4,2,2,4,8,2,8,7,2,7,6,-1,5,4,9,6,10,1,6,1,7,7,1,3,-1,0,0,0,4,9,5,7,0,8,7,6,0,0,6,1,1,6,10,-1,3,7,6,3,6,0,0,6,10,0,10,5,0,5,4,-1,4,8,5,8,10,5,8,6,10,8,7,6,-1,0,0,0,5,6,11,5,11,9,9,11,8,-1,0,0,0,0,0,0,0,9,5,0,5,6,0,6,3,3,6,11,-1,0,0,0,8,0,11,11,5,6,11,0,5,5,0,1,-1,0,0,0,11,5,6,11,3,5,5,3,1,-1,0,0,0,0,0,0,10,1,2,5,6,11,5,11,9,9,11,8,-1,0,0,0,2,10,1,3,6,11,3,0,6,6,0,5,5,0,9,-1,0,2,10,0,10,8,8,10,5,8,5,6,8,6,11,-1,11,3,6,3,5,6,3,10,5,3,2,10,-1,0,0,0,2,3,6,6,9,5,3,9,6,3,8,9,-1,0,0,0,5,0,9,5,6,0,0,6,2,-1,0,0,0,0,0,0,6,2,3,6,3,5,5,3,8,5,8,0,5,0,1,-1,6,2,1,6,1,5,-1,0,0,0,0,0,0,0,0,0,8,9,5,8,5,3,3,5,6,3,6,10,3,10,1,-1,1,0,10,0,6,10,0,5,6,0,9,5,-1,0,0,0,0,3,8,10,5,6,-1,0,0,0,0,0,0,0,0,0,10,5,6,-1,0,0,0,0,0,0,0,0,0,0,0,0,11,5,10,11,7,5,-1,0,0,0,0,0,0,0,0,0,5,11,7,5,10,11,3,0,8,-1,0,0,0,0,0,0,11,5,10,11,7,5,9,0,1,-1,0,0,0,0,0,0,9,3,1,9,8,3,5,10,11,5,11,7,-1,0,0,0,2,11,7,2,7,1,1,7,5,-1,0,0,0,0,0,0,3,0,8,2,11,7,2,7,1,1,7,5,-1,0,0,0,2,11,0,0,5,9,0,11,5,5,11,7,-1,0,0,0,9,8,3,9,3,5,5,3,2,5,2,11,5,11,7,-1,10,2,3,10,3,5,5,3,7,-1,0,0,0,0,0,0,5,10,7,7,0,8,10,0,7,10,2,0,-1,0,0,0,1,9,0,10,2,3,10,3,5,5,3,7,-1,0,0,0,7,5,10,7,10,8,8,10,2,8,2,1,8,1,9,-1,7,5,1,7,1,3,-1,0,0,0,0,0,0,0,0,0,8,1,0,8,7,1,1,7,5,-1,0,0,0,0,0,0,0,5,9,0,3,5,5,3,7,-1,0,0,0,0,0,0,7,5,9,7,9,8,-1,0,0,0,0,0,0,0,0,0,4,5,10,4,10,8,8,10,11,-1,0,0,0,0,0,0,11,3,10,10,4,5,10,3,4,4,3,0,-1,0,0,0,9,0,1,4,5,10,4,10,8,8,10,11,-1,0,0,0,3,1,9,3,9,11,11,9,4,11,4,5,11,5,10,-1,8,4,11,11,1,2,4,1,11,4,5,1,-1,0,0,0,5,1,2,5,2,4,4,2,11,4,11,3,4,3,0,-1,11,8,4,11,4,2,2,4,5,2,5,9,2,9,0,-1,2,11,3,5,9,4,-1,0,0,0,0,0,0,0,0,0,4,5,10,4,10,2,4,2,8,8,2,3,-1,0,0,0,10,4,5,10,2,4,4,2,0,-1,0,0,0,0,0,0,0,1,9,8,2,3,8,4,2,2,4,10,10,4,5,-1,10,2,5,2,4,5,2,9,4,2,1,9,-1,0,0,0,4,3,8,4,5,3,3,5,1,-1,0,0,0,0,0,0,0,4,5,0,5,1,-1,0,0,0,0,0,0,0,0,0,0,3,9,3,5,9,3,4,5,3,8,4,-1,0,0,0,4,5,9,-1,0,0,0,0,0,0,0,0,0,0,0,0,7,4,9,7,9,11,11,9,10,-1,0,0,0,0,0,0,8,3,0,7,4,9,7,9,11,11,9,10,-1,0,0,0,0,1,4,4,11,7,1,11,4,1,10,11,-1,0,0,0,10,11,7,10,7,1,1,7,4,1,4,8,1,8,3,-1,2,11,7,2,7,4,2,4,1,1,4,9,-1,0,0,0,0,8,3,1,4,9,1,2,4,4,2,7,7,2,11,-1,7,2,11,7,4,2,2,4,0,-1,0,0,0,0,0,0,7,4,11,4,2,11,4,3,2,4,8,3,-1,0,0,0,7,4,3,3,10,2,3,4,10,10,4,9,-1,0,0,0,2,0,8,2,8,10,10,8,7,10,7,4,10,4,9,-1,4,0,1,4,1,7,7,1,10,7,10,2,7,2,3,-1,4,8,7,1,10,2,-1,0,0,0,0,0,0,0,0,0,9,7,4,9,1,7,7,1,3,-1,0,0,0,0,0,0,8,7,0,7,1,0,7,9,1,7,4,9,-1,0,0,0,4,0,3,4,3,7,-1,0,0,0,0,0,0,0,0,0,4,8,7,-1,0,0,0,0,0,0,0,0,0,0,0,0,8,9,10,8,10,11,-1,0,0,0,0,0,0,0,0,0,0,11,3,0,9,11,11,9,10,-1,0,0,0,0,0,0,1,8,0,1,10,8,8,10,11,-1,0,0,0,0,0,0,3,1,10,3,10,11,-1,0,0,0,0,0,0,0,0,0,2,9,1,2,11,9,9,11,8,-1,0,0,0,0,0,0,0,9,3,9,11,3,9,2,11,9,1,2,-1,0,0,0,11,8,0,11,0,2,-1,0,0,0,0,0,0,0,0,0,2,11,3,-1,0,0,0,0,0,0,0,0,0,0,0,0,3,10,2,3,8,10,10,8,9,-1,0,0,0,0,0,0,9,10,2,9,2,0,-1,0,0,0,0,0,0,0,0,0,3,8,2,8,10,2,8,1,10,8,0,1,-1,0,0,0,2,1,10,-1,0,0,0,0,0,0,0,0,0,0,0,0,8,9,1,8,1,3,-1,0,0,0,0,0,0,0,0,0,1,0,9,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,3,8,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]);var J,Q=function(e,t,n,i){if("a"===n&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?i:"a"===n?i.call(e):i?i.value:t.get(e)};class ee{constructor(e,t,n){J.set(this,void 0),function(e,t,n,i,r){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!r)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");"a"===i?r.call(e,n):r?r.value=n:t.set(e,n)}(this,J,e.limits.maxComputeWorkgroupsPerDimension,"f"),this.totalWorkGroups=t;let i=Math.ceil(t/e.limits.maxComputeWorkgroupsPerDimension);this.stride=e.limits.minUniformBufferOffsetAlignment;let r=null;if(n&&(this.stride=E(8+n.byteLength,e.limits.minUniformBufferOffsetAlignment),r=new Uint8Array(n)),this.stride*i>e.limits.maxUniformBufferBindingSize)throw console.log("Error! PushConstants uniform buffer is too big for a uniform buffer"),Error("PushConstants uniform buffer is too big for a uniform buffer");this.pushConstantsBuffer=e.createBuffer({size:this.stride*i,usage:GPUBufferUsage.UNIFORM,mappedAtCreation:!0});let a=this.pushConstantsBuffer.getMappedRange();for(let o=0;o<i;++o){let i=new Uint32Array(a,o*this.stride,2);i[0]=e.limits.maxComputeWorkgroupsPerDimension*o,i[1]=t,r&&new Uint8Array(a,o*this.stride+8,n.byteLength).set(r)}this.pushConstantsBuffer.unmap()}numDispatches(){return this.pushConstantsBuffer.size/this.stride}pushConstantsOffset(e){return this.stride*e}dispatchSize(e){let t=this.totalWorkGroups%Q(this,J,"f");return 0==t||e+1<this.numDispatches()?Q(this,J,"f"):t}}J=new WeakMap;var te,ne,ie,re=function(e,t,n,i){return new(n||(n=Promise))((function(r,a){function o(e){try{u(i.next(e))}catch(e){a(e)}}function s(e){try{u(i.throw(e))}catch(e){a(e)}}function u(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,s)}u((i=i.apply(e,t||[])).next())}))},ae=function(e,t,n,i,r){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!r)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===i?r.call(e,n):r?r.value=n:t.set(e,n),n},oe=function(e,t,n,i){if("a"===n&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?i:"a"===n?i.call(e):i?i.value:t.get(e)};class se{constructor(e){te.set(this,void 0),this.WORKGROUP_SIZE=64,ne.set(this,void 0),ie.set(this,void 0),ae(this,te,e,"f"),ae(this,ne,e.limits.maxComputeWorkgroupsPerDimension,"f")}static create(e){return re(this,void 0,void 0,(function*(){let t=new se(e),n=e.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage",hasDynamicOffset:!0}},{binding:1,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage",hasDynamicOffset:!0}},{binding:2,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}}]}),i=e.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform",hasDynamicOffset:!0}}]});return ae(t,ie,e.createComputePipeline({layout:e.createPipelineLayout({bindGroupLayouts:[n,i]}),compute:{module:yield B(e,"@group(0) @binding(0)\nvar<storage, read_write> item_active: array<u32>;\n\n@group(0) @binding(1)\nvar<storage, read_write> output_offset: array<u32>;\n\n@group(0) @binding(2)\nvar<storage, read_write> output: array<u32>;\n\nstruct PushConstants {\n    group_id_offset: u32,\n    total_workgoups: u32,\n    total_elements: u32\n};\n\n@group(1) @binding(0)\nvar<uniform> push_constants: PushConstants;\n\n@id(0) override WORKGROUP_SIZE: u32 = 32;\n\n@compute @workgroup_size(WORKGROUP_SIZE)\nfn main(@builtin(global_invocation_id) global_id: vec3<u32>) {\n    let item_id = global_id.x + push_constants.group_id_offset * WORKGROUP_SIZE;\n    // Handle out of bounds threads\n    if (item_id >= push_constants.total_elements) {\n        return;\n    }\n    // We compact down the IDs of the active elements in the buffer.\n    // Active elements have non-zero values\n    if (item_active[global_id.x] != 0) {\n        output[output_offset[global_id.x]] = item_id;\n    }\n}\n\n","StreamCompactIDs"),entryPoint:"main",constants:{0:t.WORKGROUP_SIZE}}}),"f"),t}))}compactActiveIDs(e,t,n,i){return re(this,void 0,void 0,(function*(){let r=new Uint32Array([i]),a=new ee(oe(this,te,"f"),Math.ceil(i/this.WORKGROUP_SIZE),r.buffer),o=oe(this,te,"f").createBindGroup({layout:oe(this,ie,"f").getBindGroupLayout(1),entries:[{binding:0,resource:{buffer:a.pushConstantsBuffer,size:12}}]});const s=oe(this,ne,"f")*this.WORKGROUP_SIZE;if(a.numDispatches()>1&&4*s%256!=0)throw Error("StreamCompactIDs: Buffer dynamic offsets will not be 256b aligned! Set WORKGROUP_SIZE = 64");let u=oe(this,te,"f").createBindGroup({layout:oe(this,ie,"f").getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:e,size:4*Math.min(i,s)}},{binding:1,resource:{buffer:t,size:4*Math.min(i,s)}},{binding:2,resource:{buffer:n}}]}),f=u;const l=i%s;0!=l&&(f=oe(this,te,"f").createBindGroup({layout:oe(this,ie,"f").getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:e,size:4*l}},{binding:1,resource:{buffer:t,size:4*l}},{binding:2,resource:{buffer:n}}]}));let c=oe(this,te,"f").createCommandEncoder(),d=c.beginComputePass();d.setPipeline(oe(this,ie,"f"));for(let e=0;e<a.numDispatches();++e){let t=u;e+1==a.numDispatches()&&(t=f),d.setBindGroup(0,t,[e*s*4,e*s*4]),d.setBindGroup(1,o,[e*a.stride]),d.dispatchWorkgroups(a.dispatchSize(e),1,1)}d.end(),oe(this,te,"f").queue.submit([c.finish()]),yield oe(this,te,"f").queue.onSubmittedWorkDone()}))}}te=new WeakMap,ne=new WeakMap,ie=new WeakMap;const ue="alias float2 = vec2<f32>;\nalias float3 = vec3<f32>;\nalias float4 = vec4<f32>;\nalias uint2 = vec2<u32>;\nalias uint3 = vec3<u32>;\nalias uint4 = vec4<u32>;\nalias int2 = vec2<i32>;\nalias int3 = vec3<i32>;\nalias int4 = vec4<i32>;\n\nconst MC_NUM_CASES: u32 = 256;\nconst MC_CASE_ELEMENTS: u32 = 16;\n\nstruct VolumeInfo {\n    dims: uint4,\n    isovalue: f32,\n};\n\n@group(0) @binding(0)\nvar volume: texture_3d<f32>;\n\n@group(0) @binding(1)\nvar<uniform> volume_info: VolumeInfo;\n\nconst INDEX_TO_VERTEX: array<int3, 8> = array<int3, 8>(\n    int3(0, 0, 0),\n    int3(1, 0, 0),\n    int3(1, 1, 0),\n    int3(0, 1, 0),\n    int3(0, 0, 1),\n    int3(1, 0, 1),\n    int3(1, 1, 1),\n    int3(0, 1, 1)\n);\n\n\nfn voxel_id_to_pos(id: u32) -> uint3\n{\n    return uint3(id % (volume_info.dims[0] - 1),\n            (id / (volume_info.dims[0] - 1)) % (volume_info.dims[1] - 1),\n            id / ((volume_info.dims[0] - 1) * (volume_info.dims[1] - 1)));\n}\n\nfn compute_voxel_values(voxel: uint3, values: ptr<function, array<f32, 8>>)\n{\n    for (var i = 0; i < 8; i++) {\n        let p = voxel + uint3(INDEX_TO_VERTEX[i]);\n        (*values)[i] = textureLoad(volume, p, 0).x;\n    }\n}\n\n";var fe,le,ce,de,he,pe,ve,ge,me,_e,ye,be,we,Se,xe=function(e,t,n,i){return new(n||(n=Promise))((function(r,a){function o(e){try{u(i.next(e))}catch(e){a(e)}}function s(e){try{u(i.throw(e))}catch(e){a(e)}}function u(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,s)}u((i=i.apply(e,t||[])).next())}))},Ce=function(e,t,n,i,r){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!r)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===i?r.call(e,n):r?r.value=n:t.set(e,n),n},Pe=function(e,t,n,i){if("a"===n&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?i:"a"===n?i.call(e):i?i.value:t.get(e)};class Ee{constructor(e,t){this.count=e,this.buffer=t}}class Be{constructor(e,t){fe.set(this,void 0),le.set(this,void 0),ce.set(this,void 0),de.set(this,void 0),he.set(this,void 0),pe.set(this,void 0),ve.set(this,void 0),ge.set(this,void 0),me.set(this,void 0),_e.set(this,void 0),ye.set(this,void 0),be.set(this,void 0),Ce(this,fe,t,"f"),Ce(this,le,e,"f")}static create(e,t){return xe(this,void 0,void 0,(function*(){let n=new Be(e,t);Ce(n,ce,yield $.create(t),"f"),Ce(n,de,yield se.create(t),"f"),Ce(n,ge,t.createBuffer({size:H.byteLength,usage:GPUBufferUsage.STORAGE,mappedAtCreation:!0}),"f"),new Int32Array(Pe(n,ge,"f").getMappedRange()).set(H),Pe(n,ge,"f").unmap(),Ce(n,me,t.createBuffer({size:32,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,mappedAtCreation:!0}),"f"),new Uint32Array(Pe(n,me,"f").getMappedRange()).set(e.dims),Pe(n,me,"f").unmap(),Ce(n,_e,t.createBuffer({size:4*Pe(n,ce,"f").getAlignedSize(e.dualGridNumVoxels),usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC}),"f");let i=yield B(t,ue+"\n// include of compute_voxel_values.wgsl is inserted here\n\n@group(1) @binding(0)\nvar<storage, read_write> voxel_active: array<u32>;\n\n@compute @workgroup_size(4, 4, 2)\nfn main(@builtin(global_invocation_id) global_id: uint3)\n{\n    // We might have some workgroups run for voxels out of bounds due to the\n    // padding to align to the workgroup size. We also only compute for voxels\n    // on the dual grid, which has dimensions of volume_dims - 1\n    if (any(global_id >= volume_info.dims.xyz - uint3(1))) {\n        return;\n    }\n\n    var values: array<f32, 8>;\n    compute_voxel_values(global_id, &values);\n    // Compute the case this falls into to see if this voxel has vertices\n    var case_index = 0u;\n    for (var i = 0u; i < 8u; i++) {\n        if (values[i] <= volume_info.isovalue) {\n            case_index |= 1u << i;\n        }\n    }\n    let voxel_idx = global_id.x +\n        (volume_info.dims.x - 1) * (global_id.y + (volume_info.dims.z - 1) * global_id.z);\n    voxel_active[voxel_idx] = select(0u, 1u, case_index != 0 && case_index != MC_NUM_CASES - 1);\n}\n\n","mark_active_voxel.wgsl"),r=yield B(t,ue+"\n// include of compute_voxel_values.wgsl is inserted here\n\n@id(0) override WORKGROUP_SIZE: u32 = 32;\n\n@group(1) @binding(0)\nvar<storage> case_table: array<i32>;\n\n@group(1) @binding(1)\nvar<storage, read_write> active_voxel_ids: array<u32>;\n\n@group(1) @binding(2)\nvar<storage, read_write> voxel_num_verts: array<u32>;\n\nstruct PushConstants {\n    group_id_offset: u32,\n    total_workgoups: u32,\n    total_elements: u32\n};\n\n@group(2) @binding(0)\nvar<uniform> push_constants: PushConstants;\n\n@compute @workgroup_size(WORKGROUP_SIZE)\nfn main(@builtin(global_invocation_id) global_id: uint3)\n{\n    // Skip out of bounds threads\n    let work_item = global_id.x + push_constants.group_id_offset * WORKGROUP_SIZE;\n    if (work_item >= push_constants.total_elements) {\n        return;\n    }\n\n    let voxel_id = active_voxel_ids[work_item];\n    var values: array<f32, 8>;\n    compute_voxel_values(voxel_id_to_pos(voxel_id), &values);\n\n    var case_index = 0u;\n    for (var i = 0u; i < 8u; i++) {\n        if (values[i] <= volume_info.isovalue) {\n            case_index |= 1u << i;\n        }\n    }\n\n    // There are 16 entries per-case, terminated by a -1 when the vertex\n    // entries end for the given case\n    var num_verts = 0u;\n    for (var i = 0u; i < MC_CASE_ELEMENTS && case_table[case_index * MC_CASE_ELEMENTS + i] != -1; i++) \n    {\n        num_verts++;\n    }\n    voxel_num_verts[work_item] = num_verts;\n}\n\n","compute_num_verts.wgsl"),a=yield B(t,ue+"\n// include of compute_voxel_values.wgsl is inserted here\n\n@id(0) override WORKGROUP_SIZE: u32 = 32;\n\n@group(1) @binding(0)\nvar<storage> case_table: array<i32>;\n\n@group(1) @binding(1)\nvar<storage, read_write> active_voxel_ids: array<u32>;\n\n@group(1) @binding(2)\nvar<storage, read_write> voxel_vertex_offsets: array<u32>;\n\n@group(1) @binding(3)\nvar<storage, read_write> vertices: array<float4>;\n\nstruct PushConstants {\n    group_id_offset: u32,\n    total_workgoups: u32,\n    total_elements: u32\n};\n\n@group(2) @binding(0)\nvar<uniform> push_constants: PushConstants;\n\nconst EDGE_VERTICES: array<uint2, 12> = array<uint2, 12>(\n    uint2(0, 1),\n    uint2(1, 2),\n    uint2(2, 3),\n    uint2(3, 0),\n    uint2(4, 5),\n    uint2(6, 5),\n    uint2(6, 7),\n    uint2(7, 4),\n    uint2(0, 4),\n    uint2(1, 5),\n    uint2(2, 6),\n    uint2(3, 7)\n);\n\nfn lerp_verts(va: int3, vb: int3, fa: f32, fb: f32) -> float3\n{\n    var t: f32 = 0.0;\n    if (abs(fa - fb) >= 0.001) {\n        t = (volume_info.isovalue - fa) / (fb - fa);\n    }\n    return mix(float3(va), float3(vb), t);\n}\n\n@compute @workgroup_size(WORKGROUP_SIZE)\nfn main(@builtin(global_invocation_id) global_id: uint3)\n{\n    // Skip out of bounds threads\n    let work_item = global_id.x + push_constants.group_id_offset * WORKGROUP_SIZE;\n    if (work_item >= push_constants.total_elements) {\n        return;\n    }\n\n    let voxel_id = active_voxel_ids[work_item];\n    var values: array<f32, 8>;\n    compute_voxel_values(voxel_id_to_pos(voxel_id), &values);\n\n    var case_index = 0u;\n    for (var i = 0u; i < 8u; i++) {\n        if (values[i] <= volume_info.isovalue) {\n            case_index |= 1u << i;\n        }\n    }\n\n    let voxel_pos = voxel_id_to_pos(voxel_id);\n    let vertex_offset = voxel_vertex_offsets[work_item];\n    // Now we can finally compute and output the vertices\n    for (var i = 0u; i < MC_CASE_ELEMENTS && case_table[case_index * MC_CASE_ELEMENTS + i] != -1; i++)\n    {\n        let edge = case_table[case_index * MC_CASE_ELEMENTS + i];\n        let v0 = EDGE_VERTICES[edge].x;\n        let v1 = EDGE_VERTICES[edge].y;\n\n        // Compute the interpolated vertex for this edge within the unit cell\n        var v = lerp_verts(INDEX_TO_VERTEX[v0], INDEX_TO_VERTEX[v1], values[v0], values[v1]);\n\n        // Offset the vertex into the global volume grid\n        v = v + float3(voxel_pos) + 0.5;\n        vertices[vertex_offset + i] = float4(v, 1.0);\n    }\n}\n\n\n","compute_vertices.wgsl"),o=t.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,texture:{viewDimension:"3d"}},{binding:1,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}}]});Ce(n,ye,t.createBindGroup({layout:o,entries:[{binding:0,resource:Pe(n,le,"f").texture.createView()},{binding:1,resource:{buffer:Pe(n,me,"f")}}]}),"f");let s=t.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}}]});Ce(n,be,t.createBindGroup({layout:s,entries:[{binding:0,resource:{buffer:Pe(n,_e,"f")}}]}),"f");let u=t.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},{binding:1,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}},{binding:2,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}}]}),f=t.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},{binding:1,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}},{binding:2,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}},{binding:3,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}}]}),l=t.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform",hasDynamicOffset:!0}}]});return Ce(n,he,t.createComputePipeline({layout:t.createPipelineLayout({bindGroupLayouts:[o,s]}),compute:{module:i,entryPoint:"main"}}),"f"),Ce(n,pe,t.createComputePipeline({layout:t.createPipelineLayout({bindGroupLayouts:[o,u,l]}),compute:{module:r,entryPoint:"main"}}),"f"),Ce(n,ve,t.createComputePipeline({layout:t.createPipelineLayout({bindGroupLayouts:[o,f,l]}),compute:{module:a,entryPoint:"main"}}),"f"),n}))}computeSurface(e){return xe(this,void 0,void 0,(function*(){this.uploadIsovalue(e);let t=yield this.computeActiveVoxels();if(0==t.count)return new Ee(0,null);let n=yield this.computeVertexOffsets(t);if(0==n.count)return new Ee(0,null);let i=yield this.computeVertices(t,n);return t.buffer.destroy(),n.buffer.destroy(),new Ee(n.count,i)}))}uploadIsovalue(e){let t=Pe(this,fe,"f").createBuffer({size:4,usage:GPUBufferUsage.COPY_SRC,mappedAtCreation:!0});new Float32Array(t.getMappedRange()).set([e]),t.unmap();var n=Pe(this,fe,"f").createCommandEncoder();n.copyBufferToBuffer(t,0,Pe(this,me,"f"),16,4),Pe(this,fe,"f").queue.submit([n.finish()])}computeActiveVoxels(){return xe(this,void 0,void 0,(function*(){let e=[Math.ceil(Pe(this,le,"f").dualGridDims[0]/4),Math.ceil(Pe(this,le,"f").dualGridDims[1]/4),Math.ceil(Pe(this,le,"f").dualGridDims[2]/2)],t=Pe(this,fe,"f").createBuffer({size:Pe(this,_e,"f").size,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC|GPUBufferUsage.STORAGE});var n=Pe(this,fe,"f").createCommandEncoder(),i=n.beginComputePass();i.setPipeline(Pe(this,he,"f")),i.setBindGroup(0,Pe(this,ye,"f")),i.setBindGroup(1,Pe(this,be,"f")),i.dispatchWorkgroups(e[0],e[1],e[2]),i.end(),n.copyBufferToBuffer(Pe(this,_e,"f"),0,t,0,t.size),Pe(this,fe,"f").queue.submit([n.finish()]),yield Pe(this,fe,"f").queue.onSubmittedWorkDone();let r=yield Pe(this,ce,"f").scan(t,Pe(this,le,"f").dualGridNumVoxels);if(0==r)return new Ee(0,null);let a=Pe(this,fe,"f").createBuffer({size:4*r,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC});return yield Pe(this,de,"f").compactActiveIDs(Pe(this,_e,"f"),t,a,Pe(this,le,"f").dualGridNumVoxels),t.destroy(),new Ee(r,a)}))}computeVertexOffsets(e){return xe(this,void 0,void 0,(function*(){let t=Pe(this,fe,"f").createBuffer({size:4*Pe(this,ce,"f").getAlignedSize(e.count),usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC}),n=Pe(this,fe,"f").createBindGroup({layout:Pe(this,pe,"f").getBindGroupLayout(1),entries:[{binding:0,resource:{buffer:Pe(this,ge,"f")}},{binding:1,resource:{buffer:e.buffer}},{binding:2,resource:{buffer:t}}]}),i=new Uint32Array([e.count]),r=new ee(Pe(this,fe,"f"),Math.ceil(e.count/32),i.buffer),a=Pe(this,fe,"f").createBindGroup({layout:Pe(this,pe,"f").getBindGroupLayout(2),entries:[{binding:0,resource:{buffer:r.pushConstantsBuffer,size:12}}]}),o=Pe(this,fe,"f").createCommandEncoder(),s=o.beginComputePass();s.setPipeline(Pe(this,pe,"f")),s.setBindGroup(0,Pe(this,ye,"f")),s.setBindGroup(1,n);for(let e=0;e<r.numDispatches();++e)s.setBindGroup(2,a,[e*r.stride]),s.dispatchWorkgroups(r.dispatchSize(e),1,1);s.end(),Pe(this,fe,"f").queue.submit([o.finish()]),yield Pe(this,fe,"f").queue.onSubmittedWorkDone();let u=yield Pe(this,ce,"f").scan(t,e.count);return new Ee(u,t)}))}computeVertices(e,t){return xe(this,void 0,void 0,(function*(){let n=Pe(this,fe,"f").createBuffer({size:4*t.count*4,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_SRC}),i=Pe(this,fe,"f").createBindGroup({layout:Pe(this,ve,"f").getBindGroupLayout(1),entries:[{binding:0,resource:{buffer:Pe(this,ge,"f")}},{binding:1,resource:{buffer:e.buffer}},{binding:2,resource:{buffer:t.buffer}},{binding:3,resource:{buffer:n}}]}),r=new Uint32Array([e.count]),a=new ee(Pe(this,fe,"f"),Math.ceil(e.count/32),r.buffer),o=Pe(this,fe,"f").createBindGroup({layout:Pe(this,pe,"f").getBindGroupLayout(2),entries:[{binding:0,resource:{buffer:a.pushConstantsBuffer,size:12}}]}),s=Pe(this,fe,"f").createCommandEncoder(),u=s.beginComputePass();u.setPipeline(Pe(this,ve,"f")),u.setBindGroup(0,Pe(this,ye,"f")),u.setBindGroup(1,i);for(let e=0;e<a.numDispatches();++e)u.setBindGroup(2,o,[e*a.stride]),u.dispatchWorkgroups(a.dispatchSize(e),1,1);return u.end(),Pe(this,fe,"f").queue.submit([s.finish()]),yield Pe(this,fe,"f").queue.onSubmittedWorkDone(),n}))}}fe=new WeakMap,le=new WeakMap,ce=new WeakMap,de=new WeakMap,he=new WeakMap,pe=new WeakMap,ve=new WeakMap,ge=new WeakMap,me=new WeakMap,_e=new WeakMap,ye=new WeakMap,be=new WeakMap,Se=function*(){if(void 0===navigator.gpu)return document.getElementById("webgpu-canvas").setAttribute("style","display:none;"),void document.getElementById("no-webgpu").setAttribute("style","display:block;");let e=yield navigator.gpu.requestAdapter();console.log(e.limits);let t={requiredLimits:{maxBufferSize:e.limits.maxBufferSize,maxStorageBufferBindingSize:e.limits.maxStorageBufferBindingSize}},n=yield e.requestDevice(t),r=document.getElementById("webgpu-canvas"),o=r.getContext("webgpu"),s=document.getElementById("volumeList");!function(e,t){for(let n of t.keys()){let t=document.createElement("option");t.value=n,t.innerHTML=n,e.appendChild(t)}}(s,I);let u=document.getElementById("isovalueSlider"),f=parseFloat(u.value),l=document.getElementById("stats"),c=yield B(n,"// This type definition is just to make typing a bit easier\nalias float3 = vec3<f32>;\nalias float4 = vec4<f32>;\n\nalias uint4 = vec4<u32>;\n\nstruct VertexInput {\n    @location(0) position: float4,\n};\n\nstruct VertexOutput {\n    // This is the equivalent of gl_Position in GLSL\n    @builtin(position) position: float4,\n    @location(0) world_pos: float3,\n};\n\nstruct ViewParams {\n    proj_view: mat4x4<f32>,\n    volume_dims: uint4,\n};\n\n@group(0) @binding(0)\nvar<uniform> params: ViewParams;\n\n@vertex\nfn vertex_main(vert: VertexInput) -> VertexOutput {\n    var out: VertexOutput;\n    var pos = vert.position.xyz - float3(params.volume_dims.xyz) / 2.0;\n    out.position = params.proj_view * float4(pos, 1.0);\n    out.world_pos = pos;\n    return out;\n};\n\n@fragment\nfn fragment_main(in: VertexOutput) -> @location(0) float4 {\n    let dx = dpdx(in.world_pos);\n    let dy = dpdy(in.world_pos);\n    let n = normalize(cross(dx, dy));\n    return float4((n + 1.0) * 0.5, 1.0);\n}\n","renderMeshShaders");if(window.location.hash){let e=decodeURI(window.location.hash.substring(1));I.has(e)&&(s.value=e)}let d=s.value,h=yield W.load(I.get(d),n),p=yield Be.create(h,n),v=performance.now(),g=yield p.computeSurface(f/255),_=performance.now();l.innerHTML=`<p>Compute Time: ${(_-v).toFixed(2)}ms<br/># Triangles: ${g.count/3}</p>`;let y={module:c,entryPoint:"vertex_main",buffers:[{arrayStride:16,attributes:[{format:"float32x4",offset:0,shaderLocation:0}]}]},w="bgra8unorm";o.configure({device:n,format:w,usage:GPUTextureUsage.RENDER_ATTACHMENT});let S="depth24plus-stencil8",C=n.createTexture({size:{width:r.width,height:r.height,depthOrArrayLayers:1},format:S,usage:GPUTextureUsage.RENDER_ATTACHMENT}),E={module:c,entryPoint:"fragment_main",targets:[{format:w}]},U=n.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform"}}]}),T=n.createPipelineLayout({bindGroupLayouts:[U]}),G=n.createRenderPipeline({layout:T,vertex:y,fragment:E,depthStencil:{format:S,depthWriteEnabled:!0,depthCompare:"less"}}),M={colorAttachments:[{view:null,loadOp:"clear",clearValue:[.3,.3,.3,1],storeOp:"store"}],depthStencilAttachment:{view:C.createView(),depthLoadOp:"clear",depthClearValue:1,depthStoreOp:"store",stencilLoadOp:"clear",stencilClearValue:0,stencilStoreOp:"store"}},O=n.createBuffer({size:80,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,mappedAtCreation:!1}),k=n.createBuffer({size:O.size,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC,mappedAtCreation:!1}),A=n.createBindGroup({layout:U,entries:[{binding:0,resource:{buffer:O}}]});const L=a(i(),0,0,.75*h.dims[2]),R=a(i(),0,0,.5),z=a(i(),0,1,0);let D=new x(L,R,z,2,[r.width,r.height]),N=function(e,t,n,i,r){var a,o=1/Math.tan(t/2);return e[0]=o/n,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=o,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,null!=r&&r!==1/0?(a=1/(i-r),e[10]=(r+i)*a,e[14]=2*r*i*a):(e[10]=-1,e[14]=-2*i),e}(m(),50*Math.PI/180,r.width/r.height,.1,1e3),V=m();var F=new P;F.mousemove=function(e,t,n){1==n.buttons?D.rotate(e,t):2==n.buttons&&D.pan([t[0]-e[0],e[1]-t[1]])},F.wheel=function(e){D.zoom(e)},F.pinch=F.wheel,F.twoFingerDrag=function(e){D.pan(e)},F.registerForCanvas(r);let K=function(){let e=null,t=new Promise((t=>e=t));return window.requestAnimationFrame(e),t};for(requestAnimationFrame(K);;){if(yield K(),document.hidden)continue;let e=parseFloat(u.value)/255,t=e!=f;if(s.value!=d){g.buffer&&g.buffer.destroy(),d=s.value,history.replaceState(history.state,"#"+d,"#"+d),h=yield W.load(I.get(d),n),p=yield Be.create(h,n),u.value="128",e=parseFloat(u.value)/255,t=!0;const o=a(i(),0,0,.75*h.dims[2]);D=new x(o,R,z,2,[r.width,r.height])}if(t){g.buffer&&g.buffer.destroy(),f=e;let t=performance.now();g=yield p.computeSurface(f);let n=performance.now();l.innerHTML=`<p>Compute Time: ${(n-t).toFixed(2)}ms<br/># Triangles: ${g.count/3}</p>`}V=b(V,N,D.camera);{yield k.mapAsync(GPUMapMode.WRITE);let e=k.getMappedRange();new Float32Array(e).set(V),new Uint32Array(e,64,4).set(h.dims),k.unmap()}M.colorAttachments[0].view=o.getCurrentTexture().createView();let c=n.createCommandEncoder();c.copyBufferToBuffer(k,0,O,0,O.size);let v=c.beginRenderPass(M);g.count>0&&(v.setBindGroup(0,A),v.setPipeline(G),v.setVertexBuffer(0,g.buffer),v.draw(g.count,1,0,0)),v.end(),n.queue.submit([c.finish()])}},new((we=void 0)||(we=Promise))((function(e,t){function n(e){try{r(Se.next(e))}catch(e){t(e)}}function i(e){try{r(Se.throw(e))}catch(e){t(e)}}function r(t){var r;t.done?e(t.value):(r=t.value,r instanceof we?r:new we((function(e){e(r)}))).then(n,i)}r((Se=Se.apply(void 0,[])).next())}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,